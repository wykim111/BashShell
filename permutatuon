#i/bin/bash


declare -a Perm
declare -a array
declare -a check

TRUE=1
FALSE=0
ZERO=0
size=0

function swap()
{
        local idx1=$1
        local idx2=$2
        local temp

        echo "idx1=$idx1,idx2=$idx2"
        temp=${array[${idx1}]}
        array[${idx1}]=${array[${idx2}]}
        array[${idx2}]=${temp}
}



function init()
{
        local num=${standard}
        local remainder=0

        while [ ${num} -ne ${ZERO} ]
        do
                let remainder=num%10
                array[size]=${remainder}
                check[size]=${ZERO}
                perm[size]=${ZERP}

                let num=num/10
                let size=size+1


        done

        echo "size=${size}"

        for ((i=0;i<${size}/2;i++)); do
                swap ${i}  $(($size-1-$i))
                echo "swap $i $(($size-1-$i))"
        done



}

function permutation()
{
        local depth=$1

        if [ $depth -eq $size ]; then
                for ((i=0;i<$size;i++));do
                        echo "${perm[$i]}"

                done
                echo "end"

        else

                for ((i=0;i<$size;i++)); do

                        if [ ${check[$i]} -eq ${TRUE} ]; then
                                continue
                        fi

                        check[$i]=${TRUE}
                        perm[$depth]=${array[$i]}
                        depth=$(($depth+1))

                        permutation $depth

                        depth=$(($depth-1))
                        check[$i]=${FALSE}
                done
        fi
}
#main

read standard
init
echo "array[@] = ${array[@]}"
permutation 0
